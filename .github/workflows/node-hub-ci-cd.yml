name: node-hub

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

jobs:
  find-jobs:
    runs-on: ubuntu-latest
    name: Find Jobs
    outputs:
      folders: ${{ steps.jobs.outputs.folders }}
    steps:
      - uses: actions/checkout@v1

      - id: jobs
        uses: kmanimaran/list-folder-action@v4
        with:
          path: ./node-hub

  ci:
    runs-on: ubuntu-latest
    needs: [find-jobs]
    defaults:
      run:
        working-directory: node-hub/${{ matrix.folder }}
    strategy:
      matrix:
        folder: ${{ fromJson(needs.find-jobs.outputs.folders )}}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: runner.os == 'Linux'
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Set up Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          pip install black pylint pytest

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run Linting and Tests
        run: |
          chmod +x ../../.github/workflows/node_hub_test.sh
          ../../.github/workflows/node_hub_test.sh

  publish:
    needs: [ci, find-jobs]
    defaults:
      run:
        working-directory: node-hub/${{ matrix.folder }}
    strategy:
      matrix:
        folder: ${{ fromJson(needs.find-jobs.outputs.folders )}}
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        if: runner.os == 'Linux'
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Set up Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Publish Projects
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_PASS }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_PASS }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          dir=$(pwd)
          base_dir=$(basename "$dir")
          ignored_folders=("dora-parler")

          if [[ " ${ignored_folders[@]} " =~ " ${base_dir} " ]]; then
              echo "Skipping $base_dir as there is a hf model fetching issue..."
          else
            if [[ -f "Cargo.toml" && -f "pyproject.toml" ]]; then
              echo "Publishing $dir using maturin..."
              maturin publish  --skip-existing
            else
              if [ -f "pyproject.toml" ]; then
                echo "Publishing $dir using Poetry..."
                poetry publish --build  --skip-existing

            if [ -f "Cargo.toml" ]; then
              echo "Publishing $dir using Cargo..."
              cargo publish
            fi
          fi
