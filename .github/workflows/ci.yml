name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: "Test"
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - name: Install Cap'n Proto and libacl-dev (Linux)
        if: runner.os == 'Linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get install -y capnproto libcapnp-dev libacl1-dev
      - name: Install Cap'n Proto (macOS)
        if: runner.os == 'macOS'
        run: brew install capnp
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
      - name: Install Cap'n Proto (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install capnproto
          echo "$Env:Programfiles\capnproto" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - uses: r7kamura/rust-problem-matchers@v1
      - run: cargo --version --verbose
      - uses: Swatinem/rust-cache@v2

      - name: "Check"
        run: cargo check --all
      - name: "Build"
        run: cargo build --all
      - name: "Test"
        run: cargo test --all

  examples:
    name: "Examples"
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Cap'n Proto and libacl-dev (Linux)
        if: runner.os == 'Linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get install -y capnproto libcapnp-dev libacl1-dev
      - name: Install Cap'n Proto (macOS)
        if: runner.os == 'macOS'
        run: brew install capnp
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
      - name: Install Cap'n Proto (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install capnproto
          echo "$Env:Programfiles\capnproto" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - uses: r7kamura/rust-problem-matchers@v1
      - run: cargo --version --verbose
      - uses: Swatinem/rust-cache@v2

      - name: "Build examples"
        timeout-minutes: 30
        run: cargo build --examples

      - name: "Rust Dataflow example"
        timeout-minutes: 30
        run: cargo run --example rust-dataflow
      - name: "C Dataflow example"
        timeout-minutes: 15
        run: cargo run --example c-dataflow
      - name: "C++ Dataflow example"
        timeout-minutes: 15
        run: cargo run --example cxx-dataflow

      - name: "Start RouDi (iceoryx)"
        if: runner.os != 'Windows'
        run: find target -type f -wholename "*/iceoryx-install/bin/iox-roudi" -exec {} \; &

      - name: "Rust iceoryx example"
        if: runner.os != 'Windows'
        timeout-minutes: 30
        run: cargo run --example iceoryx

  examples-remote:
    name: "Examples (Remote)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Cap'n Proto and libacl-dev (Linux)
        if: runner.os == 'Linux'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get install -y capnproto libcapnp-dev libacl1-dev

      - uses: r7kamura/rust-problem-matchers@v1
      - run: cargo --version --verbose
      - uses: Swatinem/rust-cache@v2

      - name: "Remote Rust Dataflow example"
        timeout-minutes: 30
        run: cargo run --example rust-dataflow-url

  clippy:
    name: "Clippy"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Cap'n Proto and libacl-dev
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get install -y capnproto libcapnp-dev libacl1-dev

      - uses: r7kamura/rust-problem-matchers@v1
      - run: cargo --version --verbose
      - uses: Swatinem/rust-cache@v2

      - name: "Clippy"
        run: cargo clippy --all
      - name: "Clippy (tracing feature)"
        run: cargo clippy --all --features tracing
      - name: "Clippy (metrics feature)"
        run: cargo clippy --all --features metrics

  rustfmt:
    name: "Formatting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: r7kamura/rust-problem-matchers@v1
      - name: "rustfmt"
        run: cargo fmt --all -- --check

  check-license:
    name: "License Checks"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: r7kamura/rust-problem-matchers@v1
      - run: cargo --version --verbose
      - uses: Swatinem/rust-cache@v2

      - run: cargo install cargo-lichking
      - name: "Check dependency licenses"
        run: cargo lichking check
